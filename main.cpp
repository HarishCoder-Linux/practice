#include<iostream>
#include <stdio.h>
#include<stdlib.h>
#define NO_CELL_COl 299
#define NO_CELL_ROW 26

int main()
{
	char sSVM[2520] =
	{30, 0, 0, -6, -6, 6, 3, 0, 34, 27, 24, 0, -9, -5, 3, -7, -9, 5, 0, -4, 3, 8, 11, 0, 36, 14, 11, -29, -26, 11, 10, 7, 35, 24, 29, 0, -7, 0, 7, -17, -14, 7, 4, 1, 16, 22, 28, 0, 29, 7, -19, -59, -45, 27, 26, -12, 38, 38, 59, 0, -8, 18, 2, -16, -7, -2, 11, -11, 14, 49, 45, 0, 55, -10, -18, -54, -65, 21, 78, 23, 7, 26, 45, 0, -9, 4, 0, -20, -26, -13, 24, 6, -9, 34, 12, 0, 60, -17, -8, -34, -41, 13, 41, 68, 17, -6, 14, 0, -8, -2, 1, -12, -18, 6, -6, 27, -7, 1, 0, 0, 19, -13, 13, 0, -6, 19, 1, 13, 20, 6, 19, 0, -9, 1, 10, -2, -2, 7, -13, 0, 3, 5, 7, 0, 36, 5, 12, -3, -8, -5, 1, 6, 42, -1, 19, 0, -4, 1, 12, 3, -1, 2, -2, 6, -8, -7, 9, 0, 22, -4, -8, -8, -12, 23, -11, -4, 24, -6, -1, 0, -7, 4, 0, -1, -2, 5, -7, -3, -16, 10, 17, 0, 3, -21, -17, 9, -18, -8, -10, 1, 12, 12, 33, 0, -12, -1, -5, 8, -12, -9, -5, 3, 7, 18, 7, 0, 9, -30, -54, 55, -8, 60, -21, 23, 26, 21, 45, 0, -29, -7, -36, 15, -18, 8, -4, -10, 5, 34, 9, 0, -49, 44, -27, -8, 58, 49, 33, 23, 28, -5, -2, 0, -58, -14, -24, -19, 9, -9, 20, 5, -16, 23, 14, 0, -17, 19, 59, -28, 13, -10, 44, 23, 24, -21, -33, 0, -29, -27, 23, -26, -5, -19, 0, 21, 7, -20, -12, 0, 22, -7, 1, -11, -11, 13, 35, -20, 19, -3, -9, 0, -10, -20, 3, 2, -3, 1, -1, -2, -2, -1, 5, 0, 6, -16, -17, 4, 7, 5, 8, -2, 8, -4, 6, 0, -9, -9, 1, -1, -2, 9, -4, -9, -12, 6, 3, 0, 9, 4, 1, -12, -10, 37, 5, -7, 22, -17, 7, 0, -11, -6, 5, -5, -3, -7, -8, -3, -20, 1, 4, 0, -11, -1, -13, 8, 47, 28, -16, 11, 8, 40, 38, 0, 10, -27, -23, 17, 12, -7, -6, -11, -11, 8, -1, 0, 21, -42, -45, 67, 76, 27, 86, 10, 17, 19, 33, 0, 0, -21, -28, 35, -1, -21, 21, 7, 16, -30, 0, 0, 23, 18, -36, 78, 70, 22, 73, 46, 3, 57, 23, 0, 3, -24, -18, 1, 37, -22, 22, 30, -15, 15, 6, 0, 27, 18, 51, 50, 17, 26, 50, 65, -34, -8, 38, 0, 12, -31, -4, 9, 10, -11, 36, 25, -12, -14, 2, 0, 26, 10, 28, -7, -15, 29, 21, 74, 9, -10, -28, 0, -11, -10, -3, -14, -19, -2, 11, 10, -2, -18, -14, 0, 8, -15, 9, -6, -10, 7, 5, -10, 17, -7, -1, 0, -14, -7, -15, -1, -1, -3, -9, -13, -4, -4, 4, 0, 12, 5, -4, -12, -3, 17, -8, 1, -2, -9, 17, 0, -7, -9, -7, -9, -3, -12, -5, 1, -20, 15, 8, 0, -6, -3, -24, 21, 31, 29, -12, -5, 6, -13, 21, 0, 6, -20, -26, 13, 1, -1, -2, -11, -13, -18, -13, 0, -29, 32, -38, 41, 40, 0, 42, -7, 21, -44, -40, 0, -4, 8, -11, 10, 28, -18, 2, -11, -20, -18, -13, 0, -8, 61, 14, 54, 24, 6, 5, -1, -26, 9, -11, 0, -11, 42, 14, 33, 16, -18, -12, -10, -38, 7, 2, 0, -2, -17, 53, 8, 24, 17, -11, 18, -25, -24, -12, 0, 14, -9, 16, 1, 7, 0, -7, -1, -13, -4, 1, 0, 12, 17, 40, -12, -23, 0, -1, 22, -14, -22, -23, 0, -11, -8, 9, -8, -12, -1, -7, 5, -4, -2, 0, 0, 2, -9, 7, -2, -14, 0, 3, -11, -8, -16, -7, 0, -12, -8, -9, 2, 0, 2, -3, -10, -2, -1, -2, 0, 5, 0, 8, 21, 0, 24, -10, 0, -15, 15, 38, 0, -10, -9, -4, 11, -4, 0, -14, -4, 2, 2, -8, 0, 6, -12, -23, 71, -16, 15, 4, -2, -11, 22, 4, 0, 10, -20, -15, 15, -13, -20, -5, -4, -8, -12, -7, 0, -17, 12, -4, 26, -17, -35, 7, 3, -1, -41, -53, 0, 11, 13, -4, -13, -12, -32, -4, -4, -4, -9, -11, 0, -57, 28, 41, -20, 6, -29, -27, 1, -13, 2, 4, 0, -4, 11, 5, -2, -6, -21, -12, -6, 10, 12, 5, 0, -31, -21, -10, -22, 69, -7, -7, -38, 14, -21, -20, 0, 14, -21, -2, 0, 28, -8, 0, -3, 11, 13, 22, 0, 3, 23, 9, -15, 31, 10, -11, -1, 12, -25, -18, 0, 6, -15, -5, -7, 13, 4, 6, -4, -4, -7, 6, 0, 15, 22, 14, -2, -13, 0, 11, -1, 9, 1, 6, 0, -11, -9, -8, -2, -6, 0, -14, -6, 3, 4, -2, 0, -1, 6, 5, 31, 9, 46, -9, -12, -26, 23, 31, 0, -7, -2, 9, 15, 1, 3, -20, -6, -16, 1, -15, 0, 42, -20, -12, 41, -12, -3, 16, 15, -13, 16, -9, 0, 5, -3, -5, -1, -2, -11, 9, 2, -9, 4, -4, 0, 22, -30, 1, 2, -3, -52, 30, 17, -29, -57, -42, 0, 6, -7, 4, -16, -14, -21, 6, 4, -14, 7, -14, 0, -9, 4, 24, 2, -4, -34, -16, -25, -14, -19, 9, 0, -5, -8, -5, 0, 3, -16, -1, -14, 7, -2, 17, 0, 9, -25, -25, -6, 36, -16, -31, -31, 44, -6, -18, 0, -6, -19, -11, 12, 14, 9, -1, -1, -4, 11, 25, 0, -15, 17, -3, 5, 37, 29, 8, 29, 23, -37, -4, 0, -1, -14, -24, 3, 7, 8, -1, 1, -3, -26, -9, 0, 13, 34, 30, 5, -4, 22, 26, 26, 11, -3, 6, 0, 3, 1, -6, 14,
        2, 13, -9, -8, 0, 2, 6, 0, 3, 10, 3, 17, 7, 37, -10, -10, -9, 17, 24, 0, -5, 1, 3, 4, -2, 1, -14, -5, -5, 0, -21, 0, 45, -5, -26, 48, 12, 11, 32, 16, 2, 19, 3, 0, 10, -7, 12, -2, -4, 8, 2, -5, 15, 15, -6, 0, 41, -25, 7, -37, -12, -76, 36, 18, -29, -48, -8, 0, -2, 6, 5, -25, -19, -17, 17, -2, 4, 6, 11, 0, 16, 20, 15, -4, -10, -55, 2, -4, -4, -13, 1, 0, -4, -18, -8, -13, -3, -9, 15, 3, 3, 7, 12, 0, 7, -11, -36, 28, 51, -4, -4, -9, 8, 9, -30, 0, -16, -12, -30, 2, 6, -2, 15, 10, -15, -3, 12, 0, -14, 10, 38, 10, 25, 18, 9, 33, 26, -18, -23, 0, -12, -5, -12, -3, -6, -4, -9, 10, -16, -27, -14, 0, -4, 42, 26, -4, -4, 11, 9, 26, 3, -8, 7, 0, -13, 15, 1, 3, -7, 10, -12, -1, -4, -15, -13, 0, -14, 6, -4, 14, 6, 23, -4, -4, -7, 11, 10, 0, 6, -7, -11, 3, -4, -9, -12, 0, 6, -22, -19, 0, 38, -6, -15, 43, 12, -6, 22, 11, 7, 32, 22, 0, 8, -7, 7, 16, -1, 3, 2, -1, 11, -7, -7, 0, 35, 2, 20, -14, 9, 4, 24, 34, -55, -25, 1, 0, -13, -1, 0, -9, -19, 11, 0, 9, 16, 4, 10, 0, -15, 34, 23, 5, -8, 12, -7, -20, -49, 14, 23, 0, -33, 3, 6, -12, -6, 10, 13, -4, -4, 15, 15, 0, -43, 29, -3, 22, 47, 3, -32, -19, 11, 16, -43, 0, -24, 3, 7, 2, 18, -16, 0, 14, -8, 4, -1, 0, 23, 22, 44, 23, 25, 24, 26, 28, 29, -13, -34, 0, 15, 2, 0, -12, -5, -9, -2, -1, -16, -26, -21, 0, 5, 31, 38, 1, -20, 18, 9, 16, 23, -4, 8, 0, 5, 1, 3, -3, -14, -5, -1, -4, -2, -11, -13, 0, 11, 6, 8, 3, -3, 19, 0, -1, -7, 15, 47, 0, -3, -11, -3, 4, 14, 4, -4, -5, 13, -21, -12, 0, 29, -3, 8, 29, 45, -11, 0, 11, -22, 19, 27, 0, 7, 10, 7, 13, 14, -19, -21, -2, -9, -7, -27, 0, 17, -27, -7, -26, -19, 3, -19, 13, -33, -47, -43, 0, -11, 9, 4, -8, -9, 5, -3, 4, 1, -11, -13, 0, -6, 24, 8, -19, -25, 8, -46, -32, -9, 6, 24, 0, -22, 14, 16, -6, 3, 12, -8, -8, -13, 4, 11, 0, -5, -3, -14, 54, 25, -23, -45, -59, 27, 19, -22, 0, 12, 9, 12, 11, 6, -34, -6, -2, -22, 6, 2, 0, 19, 5, 51, 9, 15, 16, 3, -16, 8, -19, -15, 0, 9, 4, 6, 3, -1, -16, 6, 3, -25, -15, -26, 0, -8, 26, 45, 7, -7, 11, 8, -10, 6, 4, 10, 0, 14, 20, 10, -1, -11, 18, -9, -10, -5, -18, -22, 0, 2, -4, 10, -16, -13, 18, -16, -17, 3, 20, 37, 0, -7, -6, -6, -11, 8, -5, 1, 1, 17, -10, -5, 0, 4, -8, -33, 19, 31, -7, -9, 0, 2, 15, 17, 0, -16, 13, 3, 2, 14, -7, -6, 1, 7, -24, -20, 0, 19, -14, -2, -28, -7, -54, -12, 3, 3, -31, -21, 0, 5, 19, 35, 0, 5, -3, 7, -7, -8, -28, -8, 0, 8, -17, -8, 18, -13, -34, 14, -29, 1, -2, 10, 0, -1, 28, 24, 3, 0, 4, 1, -1, -2, -4, -2, 0, -2, -42, -58, 53, 29, 1, -36, 4, 24, 13, -23, 0, 14, 4, 7, 8, 9, -22, 2, -2, -12, 3, -7, 0, -23, 5, 27, -7, -5, 18, 1, 1, 10, -12, 11, 0, 20, 7, 7, -1, -14, -18, -5, 4, -16, -19, -20, 0, -10, 32, 31, 3, -15, 1, -5, -17, -3, -5, 10, 0, 13, 14, 10, -2, -17, -5, -9, -6, -7, -6, -8, 0, -4, 9, -5, -8, -15, 22, -21, -7, -3, 8, 17, 0, 1, -7, 2, -2, -1, -2, -5, -8, 19, 6, -7, 0, -8, -13, -33, 27, 0, 8, 0, -13, 4, 16, 13, 0, -20, 4, -5, 17, -3, -14, 2, -2, 13, -11, -9, 0, 15, -30, -6, 28, 3, -46, 22, 9, 17, -8, -7, 0, -9, 16, 10, 14, 3, -13, 22, -4, -2, -7, -6, 0, 6, -14, -18, 19, 28, -51, 34, 7, 13, -3, 16, 0, -2, 19, 9, 1, 17, -12, 18, 0, 5, 4, 9, 0, 12, -35, -43, 20, 33, 27, 15, 18, 7, 1, -11, 0, 2, 3, 3, -9, 7, -25, 2, 10, 5, -5, 9, 0, 5, 9, 9, -10, 5, 13, -4, 9, 10, -2, -5, 0, -2, -12, -3, -7, 0, -5, -12, 8, -18, -11, -3, 0, -16, 11, -1, 3, -16, 3, -15, 3, 0, -4, -2, 0, 3, 10, 8, 3, -11, -4, 0, 0, -5, -4, -14, 0, -3, 1, 3, -6, -14, 17, -9, -16, -3, 2, 19, 0, -10, -5, -2, 6, -3, -2, 4, -6, 7, -12, -2, 0, 4, -15, -7, 12, -8, -3, 19, -13, 7, -9, 26, 0, -18, -9, -4, 20, 5, -17, 7, -7, 15, -18, -10, 0, -23, -43, -7, 33, -1, -23, 16, -21, 11, -35, -26, 0, -6, 13, 0, 14, 8, -16, 27, 4, -11, -7, 5, 0, -15, -22, -21, 11, 39, -23, -13, -30, 7, -14, -2, 0, 9, 16, 1, 7, 23, -24, 4, 2, 2, -11, 2, 0, -11, -25, -29, -1, 17, -6, -37, -22, -3, -9, -13, 0, 3, -11, -2, -10, 15, -19, 0, -5, -6, -27, -6, 0, -17, 5, 1, -11, -2, 12, -18, 4, 9, -21, 5, 0, -4, -5, -8, -11, -1, -10, -8, 3, -14, -6, -13, 0, -18, 2, 4, -6, -15, 2, -6, 17,
        -2, -3, 11, 0, 11, 3, -6, 1, -11, -10, -8, 7, -12, -15, -18, 0, -8, 19, 19, -1, -17, 24, -7, -2, -16, 13, 31, 0, -8, -8, -7, 12, -1, -2, 1, -2, -3, -18, -12, 0, -26, -4, -10, 8, 1, 4, 14, -8, -10, 5, 7, 0, -10, -3, -5, 18, 14, -14, -6, -9, 1, -26, -4, 0, -24, -19, -28, -17, 6, -50, 4, -11, 10, -25, -27, 0, -7, 21, -8, 6, 19, -32, 7, -6, -23, -18, -6, 0, -19, -15, -29, 5, -15, -41, 3, -11, 47, 4, 12, 0, 22, 0, -12, 11, 14, -31, 6, 7, -11, -21, -25, 0, -9, -49, -41, -9, 5, -13, 1, 2, -16, -14, -9, 0, 1, 2, -12, -3, 11, -32, 11, -3, -22, -34, -21, 0, -6, 12, -2, -18, 4, 15, -3, 3, 6, -28, 11, 0, -2, 7, -5, -9, -3, -4, -6, -1, -16, -34, -26, 0, -24, 40, 5, -2, -9, 12, 14, 11, -14, -1, 24, 0, 8, -1, 1, -7, -2, -5, -2, -7, -4, -14, -15, 0, -9, 9, -7, 16, -10, 17, -41, 1, -15, 1, 0, 0, 5, -7, -1, -6, 1, 1, 4, 3, -27, -11, -6, 0, 3, -9, -39, 16, -3, 9, -12, 19, -7, 41, 15, 0, -1, 12, 9, 10, 8, -12, -6, 7, -32, -1, -8, 0, -10, -10, -20, 10, 38, -15, 42, 56, 22, 29, -6, 0, 1, 20, -8, 18, 24, -12, 2, 15, -27, -6, -16, 0, 25, 14, 8, 48, 27, 3, 98, 95, 88, 66, 38, 0, 39, 19, 10, 19, 19, -7, 23, 23, -21, -8, -49, 0, -16, -30, -9, -6, 25, 5, 77, 99, 37, 32, -24, 0, 19, 25, 17, -5, 5, -9, 21, 17, -35, -5, -27, 0, -2, 12, 2, -14, 27, 13, 44, 49, -10, -23, -40, 0, 11, 15, 9, -13, -10, -3, 11, -1, -23, -27, -25, 0, -22, 16, -4, 2, -4, 0, 29, -5, -9, -14, -4, 0, 3, 21, 15, -8, -15, -1, 5, -6, 0, -13, -19, 0, -35, 16, 4, -30, -6, 4, -55, -39, -78, -4, 24, 0, 2, -18, -16, -27, -8, 2, 12, 10, -2, -13, -5, 0, 12, -15, 0, 47, 26, 17, -60, -50, -105, -2, 35, 0, 24, 4, -1, 1, 3, 3, 1, 1, -17, -4, 3, 0, 55, -15, 26, 75, 44, 68, -67, -54, -125, -12, 28, 0, 36, 7, 17, 18, 20, 18, 1, 4, -25, -2, 1, 0, 63, 35, 87, 65, 52, 61, -63, -44, -113, 37, 3, 0, 31, 28, 42, 12, 11, 16, 11, 4, -17, 5, -2, 0, 14, 18, 40, 44, 51, 15, -52, -72, -127, 23, 0, 0, 29, 25, 65, -4, -8, 3, -4, -1, -25, -9, 3, 0, 19, 2, 54, 0, -25, 5, -37, -65, -60, -8, -12, 0, 15, 11, 26, -3, -29, 6, 2, -2, -8, -5, -10, 0, 15, 27, 38, -8, -46, -12, -47, -73, -52, 4, -10, 0, 7, 20, 23, -2, -24, 2, -1, -11, 5, -6, -7, 0
        };
	char sSVM_pp[3840];
	for(int i = 0; i<15; i++)
	{
		for(int j = 0; j<256; j++)
		{
			sSVM_pp[i*256+j] = 0;
		}
	}
	int idx = 0;
	for(int i = 0; i<15; i++)
	{
		idx = 2*128 * i; //256
		for(int j = 0; j< 24*7 ; j++)
		{
			sSVM_pp[idx + j] = sSVM[i*24*7 + j];
		}
	}
	for(int i = 0; i<15; i++)
	{
		for(int j = 0; j<256; j++)
		{
			printf("%d, ",sSVM_pp[i*256+j]);
		}
		printf("\n");
	}
//	printf("%d ",sSVM_pp[0]);
	for(int i = 0; i<15; i++)
	{
		for(int j = 0; j<256; j++)
		{
//			printf("%d ",sSVM_pp[i*256+j]);
		}
	}
//
//	////////////////////////////////APP1 HOG FEATURE ////////////////////////////////////
//	{
//		//Read an image
//		unsigned short *Buff = new unsigned short[10000*8];
//		char *filename = "0_App1_GcellY.y";
//		FILE *fp;
//		fp = fopen(filename,"r");
//
//		if(!fp)
//		{
//			printf("Error AAAAAAAAAAAAA ");
//			exit(0);
//		}
//
//		fread(Buff,sizeof(unsigned char),10000*2*8,fp); // int data
//		fclose(fp);
//
//		int idx = 0;
//		unsigned short *out = (unsigned short*)malloc(320*83*8*2);
//		for(int i=0; i < NO_CELL_ROW; i++ )
//		{
//			for(int j=0; j < NO_CELL_COl*8; j++ )
//			{
//				out[i*320*8+j] = Buff[idx++];
//			}
//		}
//
//		FILE* op_buff = NULL;
//		op_buff = fopen("0_App1_GcellY_Ref.y", "w");
//		if(op_buff)
//		{
//			fwrite((unsigned char *)out, sizeof(unsigned char),320*16*83, op_buff); // int data
//		}
//		else
//		{
//			printf("Error BBBBBBBBBBB ");
//			exit(0);
//		}
//		fclose(op_buff);
//		delete Buff;
//		free(out);
//	}
//	//------------------------------------------------------------//
//	{
//		//Read an image
//		unsigned short *Buff = new unsigned short[10000*8];
//		char *filename = "0_App1_GcellV.y";
//		FILE *fp;
//		fp = fopen(filename,"r");
//
//		if(!fp)
//		{
//			printf("Error CCCCCCCCCCC ");
//			exit(0);
//		}
//
//		fread(Buff,sizeof(unsigned char),10000*2*8,fp); // int data
//		fclose(fp);
//
//		int idx = 0;
//		unsigned short *out = (unsigned short*)malloc(320*83*8*2);
//		for(int i=0; i < NO_CELL_ROW; i++ )
//		{
//			for(int j=0; j < NO_CELL_COl*8; j++ )
//			{
//				out[i*320*8+j] = Buff[idx++];
//			}
//		}
//
//		FILE* op_buff = NULL;
//		op_buff = fopen("0_App1_GcellV_Ref.y", "w");
//		if(op_buff)
//		{
//			fwrite((unsigned char *)out, sizeof(unsigned char),320*16*83, op_buff); // int data
//		}
//		else
//		{
//			printf("Error DDDDDDDDDDDD ");
//			exit(0);
//		}
//		fclose(op_buff);
//		delete Buff;
//		free(out);
//	}
//
//
//	/////////////////////////////////APP1 Cell Norm ///////////////////////////////////////////////////
//
//	{
//		//Read an image
//		unsigned int *Buff = new unsigned int[10000];
//		char *filename = "0_App1_GcellNormY.y";
//		FILE *fp;
//		fp = fopen(filename,"r");
//
//		if(!fp)
//		{
//			printf("Error EEEEEEEEEE");
//			exit(0);
//		}
//
//		fread(Buff,sizeof(unsigned char),10000*4,fp); // int data
//		fclose(fp);
//
//		int idx = 0;
//		unsigned int *out = (unsigned int*)malloc(320*83*4);
//		for(int i=0; i < NO_CELL_ROW; i++ )
//		{
//			for(int j=0; j < NO_CELL_COl; j++ )
//			{
//				out[i*320+j] = Buff[idx++];
//			}
//		}
//
//		FILE* op_buff = NULL;
//		op_buff = fopen("0_App1_GcellNormY_Ref.y", "w");
//		if(op_buff)
//		{
//			fwrite((unsigned char *)out, sizeof(unsigned char),320*4*83, op_buff); // int data
//		}
//		else
//		{
//			printf("Error FFFFFFFFFFFFF ");
//			exit(0);
//		}
//		fclose(op_buff);
//		delete Buff;
//		free(out);
//	}
//
//	//---------------------------------------------------------//
//	{
//		//Read an image
//		unsigned int *Buff = new unsigned int[10000];
//		char *filename = "0_App1_GcellNormV.y";
//		FILE *fp;
//		fp = fopen(filename,"r");
//
//		if(!fp)
//		{
//			printf("Error GGGGGGGGGGGGGG");
//			exit(0);
//		}
//
//		fread(Buff,sizeof(unsigned char),10000*4,fp); // int data
//		fclose(fp);
//
//		int idx = 0;
//		unsigned int *out = (unsigned int*)malloc(320*83*4);
//		for(int i=0; i < NO_CELL_ROW; i++ )
//		{
//			for(int j=0; j < NO_CELL_COl; j++ )
//			{
//				out[i*320+j] = Buff[idx++];
//			}
//		}
//
//		FILE* op_buff = NULL;
//		op_buff = fopen("0_App1_GcellNormV_Ref.y", "w");
//		if(op_buff)
//		{
//			fwrite((unsigned char *)out, sizeof(unsigned char),320*4*83, op_buff); // int data
//		}
//		else
//		{
//			printf("Error HHHHHHHHHHHH ");
//			exit(0);
//		}
//		fclose(op_buff);
//		delete Buff;
//		free(out);
//	}
//
//	/////////////////////////////////////// APP 2/////////////////////////////////////////////////
//
//	{
//		//Read an image
//		unsigned char *Buff = new unsigned char[10000*24];
//		char *filename = "0_App2_FC.y";
//		FILE *fp;
//		fp = fopen(filename,"r");
//
//		if(!fp)
//		{
//			printf("Error IIIIIIIIIII");
//			exit(0);
//		}
//
//		fread(Buff,sizeof(unsigned char),10000*24,fp); // int data
//		fclose(fp);
//
//		int idx = 0;
//		unsigned char *out = (unsigned char*)malloc(320*83*24);
//		for(int i=0; i < NO_CELL_ROW; i++ )
//		{
//			for(int j=0; j < NO_CELL_COl*24; j++ )
//			{
//				out[i*320*24+j] = Buff[idx++];
//			}
//		}
//
//		FILE* op_buff = NULL;
//		op_buff = fopen("0_App2_FC_ref.y", "w");
//		if(op_buff)
//		{
//			fwrite((unsigned char *)out, sizeof(unsigned char),320*24*83, op_buff); // int data
//		}
//		else
//		{
//			printf("Error JJJJJJJJJJJJJJ ");
//			exit(0);
//		}
//		fclose(op_buff);
//		delete Buff;
//		free(out);
//	}
//
//	/////////////////////////////////////// APP 3/////////////////////////////////////////////////
//
//	{
//		//Read an image
//		float *Buff = new float[10000];
//		char *filename = "0_App3_Score_SVM.y";
//		FILE *fp;
//		fp = fopen(filename,"r");
//
//		if(!fp)
//		{
//			printf("Error KKKKKKKKKKKK");
//			exit(0);
//		}
//
//		fread(Buff,sizeof(unsigned char),10000*4,fp); // int data
//		fclose(fp);
//
//		int idx = 0;
//		float *out = (float*)malloc(320*83*4);
//		for(int i=0; i < NO_CELL_ROW; i++ )
//		{
//			for(int j=0; j < NO_CELL_COl; j++ )
//			{
//				out[i*320+j] = Buff[idx++];
//			}
//		}
//
//		FILE* op_buff = NULL;
//		op_buff = fopen("0_App3_Score_SVM_Ref.y", "w");
//		if(op_buff)
//		{
//			fwrite((unsigned char *)out, sizeof(unsigned char),320*4*83, op_buff); // int data
//		}
//		else
//		{
//			printf("Error LLLLLLLLLLLL ");
//			exit(0);
//		}
//		fclose(op_buff);
//		delete Buff;
//		free(out);
//	}
//
//
return 0;
}
